const e=require("fs"),n=require("path"),o=require("eth-crypto"),r=require("crypto");function s(){let e=__dirname,o=!1;for(;!o;){const r=n.join(e,"../");r===e?o=!0:e=r}return e}const i=s(),t="https://premium.rxdb.info/",c=t+"access-tokens/",a=t+"versions/";async function u(){const s=require(n.join(__dirname,"../","package.json")).version;let t;console.log("currentVersion: "+s);let u=__dirname;const p=[];for(;!t&&u!==i;){console.log("currentPath: "+u);const o=n.join(u,"package.json");if(e.existsSync(o)){p.push(o);const n=e.readFileSync(o,"utf-8"),r=JSON.parse(n);if(r.accessTokens&&r.accessTokens["rxdb-premium"]){t=r.accessTokens["rxdb-premium"];continue}}const r=n.join(u,".env");if(e.existsSync(r)){p.push(r);const n=e.readFileSync(r,"utf-8").split("\n").find((e=>e.includes("RXDB_PREMIUM")));if(n){const e=n.split("=")[1].replace(/[^a-zA-Z0-9]/g,"");t=e;continue}}u=n.join(u,"../")}if(console.log("accessToken: "+t),!t)throw new Error('Could not find accessToken[\'rxdb-premium\'] in any parent package.json or any "RXDB_PREMIUM" value in an ".env" file . Searched in: \n'+p.join("\n"));const d=o.publicKeyByPrivateKey(t),m=o.publicKey.toAddress(d),y=n.join(c,m+".json"),j=await f(y);if(!j[s])throw new Error("rxdb-premium version ("+s+") not found in meta json");const h={};await Promise.all(Object.entries(j[s]).map((async([e,n])=>{const r=await o.decryptWithPrivateKey(t,n);h[e]=r})));const w=await f(n.join(a,s+".json")),g=w.iv;if(await Promise.all(Object.entries(w.plugins).map((async([e,o])=>{if("source-code"===e)return;const s=h[e];if(!h[e])return"Plugin not purchased "+e;await Promise.all(Object.entries(o).map((async([e,o])=>{const i=r.createDecipheriv("aes-256-ctr",s,Buffer.from(g,"hex")),t=Buffer.concat([i.update(Buffer.from(o,"hex")),i.final()]),c=n.join(__dirname,"../",e);await l(c,t.toString())})))}))),h["source-code"]&&w.plugins["source-code"]){console.log("# decrypt source-code");const e=h["source-code"];await Promise.all(Object.entries(w.plugins["source-code"]).map((async([o,s])=>{if(!o.startsWith("src/"))return;const i=o.split("/")[1],t=h[i];if(!t)return;const c=r.createHash("sha256").update(e+t).digest("base64").substring(0,32),a=r.createDecipheriv("aes-256-ctr",c,Buffer.from(g,"hex")),u=Buffer.concat([a.update(Buffer.from(s,"hex")),a.final()]),f=n.join(__dirname,"../",o);await l(f,u.toString())}))),console.log("# decrypt source-code DONE")}}async function f(e){console.log("# Download JSON from "+e);const n=await fetch(e);return await n.json()}async function l(o,r){const s=n.join(o,"../");await e.promises.mkdir(s,{recursive:!0}),await e.promises.writeFile(o,r,"utf-8")}u();