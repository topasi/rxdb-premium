Object.defineProperty(exports,"__esModule",{value:!0}),exports.MemorySyncedRxStorageInstance=void 0,exports.awaitReplicationInSync=e;var t=require("rxdb/plugins/core"),n=require("rxjs");exports.MemorySyncedRxStorageInstance=function(){function i(n,e,i,a,s,r){if(this.closed=!1,this.pendingWrites=new Map,this.storage=n,this.databaseName=e,this.collectionName=i,this.schema=a,this.internals=s,this.options=r,this.primaryPath=(0,t.getPrimaryFieldOfPrimaryKey)(this.schema.primaryKey),a.title===t.META_INSTANCE_SCHEMA_TITLE)throw new Error("The memory-synced storage has no replication support, see https://rxdb.info/rx-storage-memory-synced.html")}var a=i.prototype;return a.bulkWrite=async function(t,e){await this.internals.initDonePromise;var i=await this.internals.forkInstance.bulkWrite(t,e);if(this.storage.settings.awaitWritePersistence){var a=await this.internals.replicationStatePromise;await a.streamQueue.up,await(0,n.firstValueFrom)(a.events.active.up.pipe((0,n.filter)((t=>!t))))}return i},a.findDocumentsById=async function(t,n){return await this.internals.initDonePromise,this.internals.forkInstance.findDocumentsById(t,n)},a.query=async function(t){return await this.internals.initDonePromise,this.internals.forkInstance.query(t)},a.count=async function(t){return await this.internals.initDonePromise,this.internals.forkInstance.count(t)},a.getAttachmentData=async function(t,n,e){return await this.internals.initDonePromise,this.internals.forkInstance.getAttachmentData(t,n,e)},a.getChangedDocumentsSince=async function(n,e){return await this.internals.initDonePromise,(0,t.getChangedDocumentsSince)(this.internals.forkInstance,n,e)},a.changeStream=function(){var t=!1;return this.internals.initDonePromise.then((()=>t=!0)),this.internals.forkInstance.changeStream().pipe((0,n.filter)((()=>!!t)))},a.cleanup=function(t){return this.internals.initDonePromise.then((()=>e(this))).then((()=>Promise.all([this.internals.forkInstance.cleanup(t),this.internals.masterInstance.cleanup(t),this.internals.metaInstance.cleanup(t)]))).then((([t,n,e])=>t&&n&&e))},a.close=async function(){await this.internals.initDonePromise,await e(this);var n=await this.internals.replicationStatePromise;await(0,t.cancelRxStorageReplication)(n),await Promise.all([this.internals.forkInstance.close(),this.internals.masterInstance.close(),this.internals.metaInstance.close()])},a.remove=async function(){await this.internals.initDonePromise,await e(this);var n=await this.internals.replicationStatePromise;await(0,t.cancelRxStorageReplication)(n),await Promise.all([this.internals.forkInstance.remove(),this.internals.masterInstance.remove(),this.internals.metaInstance.remove()])},a.conflictResultionTasks=function(){return this.internals.conflictTasks$.asObservable()},a.resolveConflictResultionTask=function(n){return this.internals.resolvedConflictTasks$.next(n),t.PROMISE_RESOLVE_VOID},i}();async function e(t){return await Promise.all(Array.from(t.internals.openConflictResolutions.values())),t.internals.initDonePromise.then((()=>t.internals.replicationStatePromise)).then((async t=>{await t.streamQueue.down,await t.streamQueue.up}))}