var t=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:!0}),exports.RxStorageInstanceSQLite=void 0,exports.createSQLiteStorageInstance=i;t(require("@babel/runtime/helpers/readOnlyError"));var a=require("rxdb/plugins/core"),e=require("rxjs"),s=require("./sqlite-helpers.js"),n=0,r=exports.RxStorageInstanceSQLite=function(){function t(t,s,r,i,o,h,c,m,l){this.changes$=new e.Subject,this.instanceId=n++,this.storage=t,this.databaseName=s,this.collectionName=r,this.schema=i,this.internals=o,this.options=h,this.settings=c,this.tableName=m,this.devMode=l,this.sqliteBasics=t.settings.sqliteBasics,this.primaryPath=(0,a.getPrimaryFieldOfPrimaryKey)(this.schema.primaryKey)}var r=t.prototype;return r.run=function(t,a){return this.devMode&&(0,s.ensureParamsCountIsCorrect)(a),this.sqliteBasics.run(t,a)},r.all=function(t,a){return this.devMode&&(0,s.ensureParamsCountIsCorrect)(a),this.sqliteBasics.all(t,a)},r.bulkWrite=async function(t,e){var n=await this.internals.databasePromise,r={error:[]},i=[],o=[],h=5,c="("+new Array(h).fill("?").join(", ")+")",m=s.SQLITE_VARIABLES_LIMIT/h,l=(0,a.batchArray)(t,m);return await(0,s.sqliteTransaction)(n,this.sqliteBasics,(async()=>{if(this.closed)throw new Error("SQLite.bulkWrite() already closed "+this.tableName+" context: "+e);return await Promise.all(l.map((async h=>{var m=h.map((t=>t.document[this.primaryPath])),l=await this.all(n,{query:'\n                                    SELECT data FROM "'+this.tableName+'" WHERE id IN ('+m.map((()=>"?")).join(", ")+")\n                                ",params:m,context:{method:"bulkWrite",data:t}}),d=new Map;l.forEach((t=>{var a=JSON.parse((0,s.getDataFromResultRow)(t)),e=a[this.primaryPath];d.set(e,a)}));var u=(0,a.categorizeBulkWriteRows)(this,this.primaryPath,d,h,e);o.push(u),r.error=u.errors;var y=new Map;if(u.bulkInsertDocs.length>0){var p='INSERT INTO "'+this.tableName+'" (\n                                id,\n                                revision,\n                                deleted,\n                                lastWriteTime,\n                                data\n                            ) VALUES '+new Array(u.bulkInsertDocs.length).fill(c).join(", ")+"; ",E=[];u.bulkInsertDocs.forEach((t=>{var a=t.document,e=a[this.primaryPath];y.set(e,a),E.push(e),E.push(a._rev),E.push(a._deleted?1:0),E.push(a._meta.lwt),E.push(JSON.stringify(a))})),i.push(this.all(n,{query:p,params:E,context:{method:"bulkWrite",data:u}}))}u.bulkUpdateDocs.length>0&&u.bulkUpdateDocs.forEach((t=>{var a=t.document[this.primaryPath];y.set(a,t.document),i.push(this.run(n,(0,s.getSQLiteUpdateSQL)(this.tableName,this.primaryPath,t)))})),u.attachmentsAdd.forEach((t=>{var e=this.all(n,{query:'\n                                        INSERT INTO "'+this.tableName+'_attachments" (\n                                                docIdWithAttachmentId,\n                                                digest,\n                                                length,\n                                                type,\n                                                data\n                                            )\n                                        VALUES(?, ?, ?, ?, ?); \n                                    ',params:[(0,s.attachmentRowKey)(t.documentId,t.attachmentId),(0,a.getFromMapOrThrow)(y,t.documentId)._attachments[t.attachmentId].digest,t.attachmentData.length,t.attachmentData.type,this.storage.base64AttachmentToStoredAttachmentsData(t.attachmentData.data)],context:{method:"bulkWrite attachmentsAdd",data:t.attachmentId}});i.push(e)})),u.attachmentsRemove.forEach((t=>{var a=this.all(n,{query:'\n                                    DELETE FROM\n                                        "'+this.tableName+'_attachments"\n                                    WHERE\n                                        docIdWithAttachmentId = ?\n                                    ',params:[(0,s.attachmentRowKey)(t.documentId,t.attachmentId)],context:{method:"bulkWrite attachmentsRemove",data:t.attachmentId}});i.push(a)})),u.attachmentsUpdate.forEach((t=>{var e=this.all(n,{query:'\n                                    UPDATE "'+this.tableName+'_attachments"\n                                    SET\n                                        digest = ?,\n                                        length = ?,\n                                        type = ?,\n                                        data = ?\n                                    WHERE\n                                        docIdWithAttachmentId = ?\n                                    ',params:[(0,a.getFromMapOrThrow)(y,t.documentId)._attachments[t.attachmentId].digest,t.attachmentData.length,t.attachmentData.type,this.storage.base64AttachmentToStoredAttachmentsData(t.attachmentData.data),(0,s.attachmentRowKey)(t.documentId,t.attachmentId)],context:{method:"bulkWrite attachmentsUpdate",data:t.attachmentId}});i.push(e)}))}))),await Promise.all(i),this.closed?"ROLLBACK":"COMMIT"}),{databaseName:this.databaseName,collectionName:this.collectionName}),o.forEach((t=>{if(t.eventBulk.events.length>0){var e=(0,a.ensureNotFalsy)(t.newestRow).document;t.eventBulk.checkpoint={id:e[this.primaryPath],lwt:e._meta.lwt},t.eventBulk.endTime=(0,a.now)(),this.changes$.next(t.eventBulk)}})),r},r.modifyQuery=function(t,a){return this.storage.settings.queryModifier?this.storage.settings.queryModifier(a,t):a},r.query=async function(t){var e=(0,s.prepareSQLiteQuery)(this,t.query),n=await this.internals.databasePromise;if(await this.internals.indexCreationPromise,e.nonImplementedOperator){for(var r=e.mangoQuery,i=r.skip?r.skip:0,o=i+(r.limit?r.limit:1/0),h=[],c=(0,a.getQueryMatcher)(this.schema,r),m=0,l=!1;!1===l;){var d=await this.all(n,this.modifyQuery(e,{query:'SELECT data FROM "'+this.tableName+'" '+e.sqlQuery.query+" OFFSET "+m,params:e.sqlQuery.params,context:{method:"query - bulk iteration",data:e}}));m+=d.length,d.forEach((t=>{var a=JSON.parse((0,s.getDataFromResultRow)(t));c(a)&&h.push(a)})),(0===d.length||h.length>=o)&&(l=!0)}return{documents:h=h.slice(i,o)}}return{documents:(await this.all(n,this.modifyQuery(e,{query:'SELECT data FROM "'+this.tableName+'" '+e.sqlQuery.query,params:e.sqlQuery.params,context:{method:"query - normal",data:e}}))).map((t=>JSON.parse((0,s.getDataFromResultRow)(t))))}},r.count=async function(t){var a=(0,s.prepareSQLiteQuery)(this,t.query);if(a.nonImplementedOperator)return{count:(await this.query(t)).documents.length,mode:"slow"};var e=await this.internals.databasePromise;await this.internals.indexCreationPromise;var n=(await this.all(e,this.modifyQuery(a,{query:'SELECT COUNT(1) as count FROM "'+this.tableName+'" '+a.queryWithoutSort,params:a.sqlQuery.params,context:{method:"count",data:a}})))[0];Array.isArray(n);var r=Array.isArray(n)?n[0]:n.count;return{count:r,mode:"fast"}},r.findDocumentsById=async function(t,a){var e=await this.internals.databasePromise;if(this.closed)throw new Error("SQLite.findDocumentsById() already closed "+this.tableName+" context: "+context);for(var n=await this.all(e,(0,s.getSQLiteFindByIdSQL)(this.tableName,t,a)),r=[],i=0;i<n.length;++i){var o=n[i];r.push(JSON.parse((0,s.getDataFromResultRow)(o)))}return r},r.changeStream=function(){return this.changes$.asObservable()},r.cleanup=async function(t){var a=await this.internals.databasePromise;await this.internals.indexCreationPromise;var e=(new Date).getTime()-t;return await this.all(a,{query:'\n                    DELETE FROM\n                        "'+this.tableName+'"\n                    WHERE\n                        deleted = 1\n                        AND\n                        lastWriteTime < ?\n                ',params:[e],context:{method:"cleanup",data:t}}),await this.run(a,{query:"pragma optimize;",params:[],context:{method:"cleanup optimize",data:t}}),!0},r.getAttachmentData=async function(t,a){var e=await this.internals.databasePromise,n='\n        SELECT data\n        FROM "'+this.tableName+'_attachments"\n        WHERE\n            docIdWithAttachmentId = ?\n        LIMIT 1\n        ;',r=(await this.all(e,{query:n,params:[(0,s.attachmentRowKey)(t,a)],context:{method:"getAttachmentData",data:a}}))[0];return Array.isArray(r)?this.storage.storedAttachmentsDataToBase64(r[0]):this.storage.storedAttachmentsDataToBase64(r.data)},r.remove=async function(){if(this.closed)throw new Error("closed already");var t=await this.internals.databasePromise;await this.internals.indexCreationPromise;var a=[this.run(t,{query:'DROP TABLE IF EXISTS "'+this.tableName+'"',params:[],context:{method:"remove",data:this.tableName}})];return this.schema.attachments&&a.push(this.run(t,{query:'DROP TABLE IF EXISTS "'+this.tableName+'_attachments"',params:[],context:{method:"remove attachments",data:this.tableName}})),await Promise.all(a),this.close()},r.close=async function(){return this.closed||(this.closed=(async()=>{var t=await this.internals.databasePromise;await this.internals.indexCreationPromise,await(0,s.sqliteTransaction)(t,this.sqliteBasics,(async()=>"COMMIT")),this.changes$.complete(),await(0,s.closeDatabaseConnection)(this.databaseName,this.storage.settings.sqliteBasics)})()),this.closed},r.conflictResultionTasks=function(){return(new e.Subject).asObservable()},r.resolveConflictResultionTask=function(t){return a.PROMISE_RESOLVE_VOID},t}();async function i(t,e,n){var i=(0,a.getPrimaryFieldOfPrimaryKey)(e.schema.primaryKey),o=n.sqliteBasics,h=e.collectionName+"-"+e.schema.version,c={};c.databasePromise=(0,s.getDatabaseConnection)(t.settings.sqliteBasics,e.databaseName).then((async t=>(await(0,s.sqliteTransaction)(t,o,(async()=>{var a='\n                CREATE TABLE IF NOT EXISTS "'+h+'"(\n                    id TEXT NOT NULL PRIMARY KEY,\n                    revision TEXT,\n                    deleted BOOLEAN NOT NULL CHECK (deleted IN (0, 1)),\n                    lastWriteTime INTEGER NOT NULL,\n                    data json\n                ) WITHOUT ROWID;\n                ';if(await o.run(t,{query:a,params:[],context:{method:"createSQLiteStorageInstance create tables",data:e.databaseName}}),e.schema.attachments){var s='\n                    CREATE TABLE IF NOT EXISTS "'+h+'_attachments"(\n                        docIdWithAttachmentId TEXT NOT NULL PRIMARY KEY,\n                        digest TEXT NOT NULL,\n                        length INTEGER NOT NULL,\n                        type TEXT NOT NULL,\n                        data BLOB\n                    ) WITHOUT ROWID;\n                    ';await o.run(t,{query:s,params:[],context:{method:"createSQLiteStorageInstance create tables",data:e.databaseName}})}return"COMMIT"}),{indexCreation:!1,databaseName:e.databaseName,collectionName:e.collectionName}),t))),c.indexCreationPromise=c.databasePromise.then((async t=>(await(0,a.promiseWait)(0),await(0,s.sqliteTransaction)(t,o,(async()=>{var n=e.schema.indexes?e.schema.indexes.map((t=>(0,a.isMaybeReadonlyArray)(t)?t:[t])):[];n.push(["deleted","lastWriteTime"]);var r=[];for(var c of n){var m=(0,a.isMaybeReadonlyArray)(c)?c:[c],l=(0,s.getIndexId)(e.databaseName,e.collectionName,e.schema,m),d=m.map((t=>(0,s.getJsonExtract)(i,t))),u='CREATE INDEX IF NOT EXISTS "'+l+'" ON "'+h+'"('+d.join(", ")+"); ";r.push(u)}return r.length>0&&await Promise.all(r.map((async a=>{await o.run(t,{query:a,params:[],context:{method:"createSQLiteStorageInstance create indexes table",data:e.databaseName}})}))),"COMMIT"}),{indexCreation:!0,databaseName:e.databaseName,collectionName:e.collectionName}),t)));var m=new r(t,e.databaseName,e.collectionName,e.schema,c,e.options,n,h,e.devMode);return await(0,a.addRxStorageMultiInstanceSupport)(s.RX_STORAGE_NAME_SQLITE,e,m),m}