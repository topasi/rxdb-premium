Object.defineProperty(exports,"__esModule",{value:!0}),exports.WorkerOPFSFilesystemWritable=exports.WorkerOPFSFilesystemFileSyncAccessHandle=exports.WorkerOPFSFilesystemFileHandle=exports.WorkerOPFSFilesystemDirectory=exports.WorkerOPFSFilesystem=void 0,exports.createSyncAccessHandleFromFileHandle=a;exports.WorkerOPFSFilesystem=function(){function t(){this.opfsRootPromise=navigator.storage.getDirectory()}return t.prototype.getDirectory=async function(){var t=await this.opfsRootPromise;return new e(t)},t}();var e=exports.WorkerOPFSFilesystemDirectory=function(){function e(e){this.baseDir=e}var n=e.prototype;return n.getDirectoryHandle=async function(t,n){return new e(await this.baseDir.getDirectoryHandle(t,n))},n.getFileHandle=async function(e,n){var r=await this.baseDir.getFileHandle(e,n);return new t(e,r)},n.removeEntry=function(e){return this.baseDir.removeEntry(e)},e}(),t=exports.WorkerOPFSFilesystemFileHandle=function(){function e(e,t){this.name=e,this.fileHandle=t}return e.prototype.createAccessHandle=async function(){return new n(this)},e}(),n=exports.WorkerOPFSFilesystemFileSyncAccessHandle=function(){function e(e){this.fileHandle=e,this.syncAccessHandlePromise=a(this.fileHandle)}var t=e.prototype;return t.getHandle=function(){var e=this.syncAccessHandle;return e||this.syncAccessHandlePromise.then((e=>(this.syncAccessHandle=e,e)))},t.getWritable=function(){return new r(this)},t.read=async function(e,t){var n=await this.getHandle();t||(t=await n.getSize());var r=new Uint8Array(t-e);return await n.read(r,{at:e}),r},t.truncate=async function(e){var t=await this.getHandle();await t.truncate(e)},t.getSize=async function(){return(await this.getHandle()).getSize()},t.close=async function(){var e=await this.getHandle();await e.close()},e}(),r=exports.WorkerOPFSFilesystemWritable=function(){function e(e){this.accessHandle=e}var t=e.prototype;return t.write=async function(e,t){var n=await this.accessHandle.getHandle();await n.write(e,t)},t.flush=async function(){var e=await this.accessHandle.getHandle();await e.flush()},t.close=async function(){var e=await this.accessHandle.getHandle();await e.close()},e}();async function a(e){if("function"!=typeof e.fileHandle.createSyncAccessHandle)throw new Error('Could not access fileHandle.createSyncAccessHandle(). Likely this is because this storage only works "inside dedicated Web Workers"');try{return await e.fileHandle.createSyncAccessHandle()}catch(e){throw e}}