Object.defineProperty(exports,"__esModule",{value:!0}),exports.RxStorageInstanceIndexedDB=void 0,exports.createIndexedDBStorageInstance=d;var e=require("rxdb/plugins/core"),t=require("rxjs"),n=require("./indexeddb-helpers.js"),s=require("./indexeddb-index-helpers.js"),a=require("./indexeddb-query.js"),r=require("./indexeddb-find-by-ids.js"),i=require("./indexeddb-bulk-write.js"),o=(0,e.now)(),c=exports.RxStorageInstanceIndexedDB=function(){function c(n,s,a,r,i,c,d){this.changes$=new t.Subject,this.instanceId=o++,this.storage=n,this.databaseName=s,this.collectionName=a,this.schema=r,this.internals=i,this.options=c,this.settings=d,this.primaryPath=(0,e.getPrimaryFieldOfPrimaryKey)(this.schema.primaryKey)}var d=c.prototype;return d.updateMinKnownDocs=function(e){this.internals.minKnownDocsAmount<e&&(this.internals.minKnownDocsAmount=e)},d.bulkWrite=async function(e,t){var n=await(0,i.bulkWrite)(this,e,t);return this.updateMinKnownDocs(e.length-n.error.length),n},d.findDocumentsById=async function(e,t){(0,n.ensureNotClosed)(this);var s=await(0,n.runReadTask)(this,(async n=>{var s=n.objectStore(this.internals.storeNames.documentStore);return(0,r.indexedDBFindByIds)(s,e,t)}));return this.updateMinKnownDocs(s.length),s},d.query=async function(e){await this.internals.state.creationPromise,(0,n.ensureNotClosed)(this);var t=await(0,a.queryIndexedDB)(this,e);return this.updateMinKnownDocs(t.documents.length),t},d.count=async function(e){if(e.queryPlan.selectorSatisfiedByIndex){var t=await(0,a.countIndexedDB)(this,e);return this.updateMinKnownDocs(t.count),t}var n=await(0,a.queryIndexedDB)(this,e);return this.updateMinKnownDocs(n.documents.length),{count:n.documents.length,mode:"slow"}},d.changeStream=function(){return this.changes$.asObservable()},d.cleanup=async function(t){var a=this.internals.state;await a.creationPromise;var r=this.settings.IDBKeyRange;return(0,n.ensureNotClosed)(this),(0,n.runReadTask)(this,(async n=>{var a=n.objectStore(this.internals.storeNames.documentStore),i=this.settings.batchSize,o=(0,e.now)()-t,c=(0,s.getIndexId)(this.internals,s.CLEANUP_INDEX),d=a.index(c),u=(0,e.getStartIndexStringFromLowerBound)(this.schema,s.CLEANUP_INDEX,[!0,1]),h=(0,e.getStartIndexStringFromUpperBound)(this.schema,s.CLEANUP_INDEX,[!0,o]),l=r.bound(u,h,!0,!0),m=await new Promise(((e,t)=>{var n=d.getAll(l,i);n.onerror=t,n.onsuccess=function(t){e(t.target.result)}}));return await Promise.all(m.map((e=>new Promise(((t,n)=>{var s=e.i,r=a.delete(s);r.onerror=n,r.onsuccess=()=>t()}))))),m.length<i}))},d.remove=async function(){var e=this.internals.state;return await e.creationPromise,(0,n.ensureNotClosed)(this),(0,n.runReadTask)(this,(async e=>{var t=[e.objectStore(this.internals.storeNames.documentStore),e.objectStore(this.internals.storeNames.writeAheadStore)];return this.schema.attachments&&t.push(e.objectStore(this.internals.storeNames.attachmentsStore)),await Promise.all(t.map((e=>new Promise(((t,n)=>{var s=e.clear();s.onerror=n,s.onsuccess=t}))))),this.close()}))},d.getAttachmentData=async function(e,t){var s=this.internals.state;return await s.creationPromise,(0,n.ensureNotClosed)(this),(0,n.runReadTask)(this,(s=>{var a=s.objectStore(this.internals.storeNames.attachmentsStore),r=(0,n.attachmentObjectId)(e,t);return new Promise(((n,s)=>{var i=a.get(r);i.onsuccess=()=>{var a=i.result;a?n(a.data):s("attachment missing documentId: "+e+" attachmentId: "+t)}}))}))},d.close=async function(){return this.closed||(this.closed=(async()=>(await this.internals.state.creationPromise,await(0,n.runReadTask)(this,(async e=>{})),this.changes$.complete(),(0,n.closeIndexedDBDatabase)(this.internals.state)))()),this.closed},d.conflictResultionTasks=function(){return(new t.Subject).asObservable()},d.resolveConflictResultionTask=function(t){return e.PROMISE_RESOLVE_VOID},c}();async function d(t,a,r){var i=(0,s.getIndexableStringByIndexName)(a.schema),o=Array.from(i.indexIdByName.values()),d=await(0,n.getIndexedDBState)(t,r,a,[{collectionName:a.collectionName,schema:a.schema,indexIds:o}]);await d.creationPromise;var u={state:d,storeNames:(0,n.getStoreNamesForStorageInstance)(a.collectionName,a.schema),getIndexableStringByIndexId:i.monadByIndexId,getIndexableStringByIndexNumber:Object.values(i.monadByIndexId),indexIdByName:i.indexIdByName,indexNames:Object.keys(i),indexIds:o,minKnownDocsAmount:0},h=new c(t,a.databaseName,a.collectionName,a.schema,u,a.options,r);return await(0,e.addRxStorageMultiInstanceSupport)(n.RX_STORAGE_NAME_INDEXEDDB,a,h),h}