import{getPrimaryFieldOfPrimaryKey as e,now as t,PROMISE_RESOLVE_VOID as s,RXJS_SHARE_REPLAY_DEFAULTS as a}from"rxdb/plugins/core";import{Subject as n,shareReplay as i}from"rxjs";import{getStorageInstanceInternalState as r}from"./helpers.js";import{bulkWrite as o,processChangesFileIfRequired as c}from"./bulk-write.js";import{findDocumentsByIds as u}from"./find-by-ids.js";import{TaskQueue as h,getAccessHandle as m,getLockId as l}from"./task-queue.js";import{abstractFilesystemQuery as d}from"./query.js";import{getChangedDocumentsSince as f}from"./get-changed-documents-since.js";import{cleanup as p}from"./cleanup.js";import{runBasicsTests as g}from"./tests.js";import{abstractFilesystemCount as y}from"./count.js";import{getAttachmentData as w}from"./attachments.js";var k=t();export var RxStorageInstanceAbstractFilesystem=function(){function t(t,s,a,i,r,o,c,u,h){this.changes$=new n,this.instanceId=k++,this.readQueueEntries=[],this.storage=t,this.databaseName=s,this.collectionName=a,this.schema=i,this.internals=r,this.options=o,this.settings=c,this.databaseInstanceToken=u,this.jsonPositionSize=h,this.primaryPath=e(this.schema.primaryKey),this.taskQueue=r.taskQueue}var r=t.prototype;return r.bulkWrite=function(e,t){return this.taskQueue.runWrite((async s=>o(s,this,e,t)))},r.findDocumentsById=async function(e,t){return this.taskQueue.runRead((s=>u(this,e,t,s)))},r.query=function(e){return this.taskQueue.runRead((async t=>d(this,e,t)))},r.count=async function(e){return e.queryPlan.selectorSatisfiedByIndex?this.taskQueue.runRead((async t=>await y(this,e,t))):{count:(await this.query(e)).documents.length,mode:"slow"}},r.getAttachmentData=function(e,t,s){return this.taskQueue.runRead((async a=>w(a,this,e,t,s)))},r.getChangedDocumentsSince=function(e,t){return this.taskQueue.runRead((async s=>f(this,s,e,t)))},r.changeStream=function(){return this.changes$.pipe(i(a))},r.cleanup=function(e){return this.taskQueue.runWrite((async t=>await p(this,t,e)))},r.close=async function(){return this.closed||(this.closed=(async()=>{var e=await this.internals.statePromise;await this.taskQueue.awaitIdle(),e.broadcastChannelMessages$.complete(),this.changes$.complete()})()),this.closed},r.remove=async function(){if(this.closed)throw new Error("instance is closed "+this.databaseName+"-"+this.collectionName);await this.taskQueue.awaitIdle(),await this.close(),await this.taskQueue.runWrite((async e=>{var t=await this.internals.statePromise,s=[t.documentFileHandle,t.changelogFile.fileHandle];for(var a of t.indexStates)s.push(a.fileHandle);await Promise.all(s.map((async t=>{var s=await t,a=await m(s,e);await a.truncate(0)})))}))},r.conflictResultionTasks=function(){return(new n).asObservable()},r.resolveConflictResultionTask=function(e){return s},t}();var b=!1;export async function createAbstractFilesystemStorageInstance(e,t,s){!b&&t.devMode&&(b=!0,await g(e.abstractFilesystem,e.abstractLock));var a=l(t),n=new h(a,e.abstractLock),i={taskQueue:n,statePromise:r(e.abstractFilesystem,t,n,e.jsonPositionSize)},o=new RxStorageInstanceAbstractFilesystem(e,t.databaseName,t.collectionName,t.schema,i,t.options,s,t.databaseInstanceToken,e.jsonPositionSize);return i.statePromise.then((e=>{n.beforeTaskReadOrWrite.push((t=>c(t,e,o,!1)))})),i.statePromise.then((e=>{e.broadcastChannelMessages$.subscribe((async t=>{if("event"===t.type)t.changelogOperations.forEach((t=>{var s=t[0];e.indexStates[s].runChangelogOperation(t)})),t.eventBulk&&o.changes$.next(t.eventBulk);else{if("pre-write"!==t.type)throw new Error("BroadcastChannelMessageChanges$: unknown type "+t);e.mightHaveUnprocessedChanges=t.mightHaveUnprocessedChanges}}))})),o}