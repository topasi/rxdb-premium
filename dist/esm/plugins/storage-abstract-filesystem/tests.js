import{DEFAULT_DOC_JSON_POSITION_SIZE as e,toPaddedString as t}from"./helpers.js";import{AbstractFile as a}from"./file-abstraction.js";import{TaskQueue as s,getAccessHandle as r}from"./task-queue.js";import{clone as o,fillWithDefaultSettings as i,getWrittenDocumentsFromBulkWriteResponse as n,now as l,promiseWait as c,randomCouchString as d}from"rxdb/plugins/core";import{getRxStorageAbstractFilesystem as u}from"./index.js";import{randomNumber as m,randomString as g}from"async-test-util";import{DECODER as w,ENCODER as v}from"./documents-file.js";export async function runBasicsTests(r,m){try{var g=new s("runBasicsTests",m),y=await r.getDirectory(),b=await y.getDirectoryHandle("basics-test",{create:!0}),f=new a(b.getFileHandle("check-file.txt",{create:!0}),100,[]),E=!1;if(await g.runWrite((async e=>{var t=await f.readHeader(e);t&&t.done&&(E=!0)})),E)return void console.log("dev-mode: runBasicsTests() HAS RUN ALREADY");console.log("dev-mode: runBasicsTests() START");var B=await b.getFileHandle("write-test.txt",{create:!0});console.log("dev-mode: runBasicsTests() 0.0");var R=await B.createAccessHandle();console.log("dev-mode: runBasicsTests() 0.1");var T=await R.getWritable();await T.write(v.encode("1234567890"),{at:0}),console.log("dev-mode: runBasicsTests() 0.2"),console.log("dev-mode: runBasicsTests() 1");var S=await R.read(2,10);if("34567890"!==w.decode(S))throw new Error("wrong readBufferA "+w.decode(S));console.log("dev-mode: runBasicsTests() 2"),T=await R.getWritable(),await T.write(v.encode("FOOBAR"),{at:4}),console.log("dev-mode: runBasicsTests() 3");var N=await R.read(0,10);if(console.log("dev-mode: runBasicsTests() 3.1"),"1234FOOBAR"!==w.decode(N))throw new Error("wrong readBuffer "+w.decode(N));console.log("dev-mode: runBasicsTests() 4"),await R.close(),console.log("dev-mode: runBasicsTests() 5");var W=new a(b.getFileHandle("one-file.txt",{create:!0}),0,[{type:"number",length:5},{type:"string",length:1},{type:"string",length:20}]),A=[[1,"A",t("foobar1",20)],[2,"B",t("foobar2",20)],[3,"C",t("foobar3",20)]];await g.runWrite((async e=>{await W.appendRows(e,A)})),await g.runRead((async e=>{var t=[];if(await W.readRows(e,0,(e=>t.push(e))),JSON.stringify(A)!==JSON.stringify(t))throw console.dir({writeRows:A,readRows:t}),new Error("rows not equal!")})),await g.runWrite((async e=>{await f.writeHeader(e,{done:!0})}));var O="runBasicsTests()";console.log("dev-mode: runBasicsTests() ENSURE CLEANUP WORKS 0");var U=u({name:"test",abstractFilesystem:r,abstractLock:m,jsonPositionSize:e});console.log("dev-mode: runBasicsTests() ENSURE CLEANUP WORKS 1");var h=await U.createStorageInstance({databaseInstanceToken:d(10),databaseName:d(10),collectionName:d(10),schema:i({version:0,type:"object",primaryKey:"key",properties:{key:{type:"string",maxLength:50},stringValue:{type:"string",maxLength:50},numberValue:{type:"number",minimum:0,maximum:1e3,multipleOf:1},nes:{type:"object",properties:{ted:{type:"string",maxLength:10}},required:["ted"],additionalProperties:!1},list:{type:"array",items:{type:"object",additionalProperties:!1,properties:{stringValue:{type:"string",maxLength:50},numberValue:{type:"number",minimum:0,maximum:1e3,multipleOf:1}},required:["stringValue","numberValue"]}}},required:["key","stringValue","numberValue","nes","list"],indexes:[["stringValue"],["numberValue"],["numberValue","stringValue"]],additionalProperties:!1}),multiInstance:!1,options:{},devMode:!0});console.log("dev-mode: runBasicsTests() ENSURE CLEANUP WORKS 2"),await h.internals.statePromise,console.log("dev-mode: runBasicsTests() ENSURE CLEANUP WORKS 3"),await h.bulkWrite(new Array(2).fill(0).map(((e,t)=>({document:getWriteData({key:"a-"+t,list:[]})}))),O);var V=getWriteData({key:"foobar"});console.log("dev-mode: runBasicsTests() ENSURE CLEANUP WORKS 4");var k=[{document:V}],L=await h.bulkWrite(k,O);console.log("dev-mode: runBasicsTests() ENSURE CLEANUP WORKS 4.1");var P=n("key",k,L),x=o(P[0]);console.log("dev-mode: runBasicsTests() ENSURE CLEANUP WORKS 5"),await h.bulkWrite(new Array(2).fill(0).map(((e,t)=>({document:getWriteData({key:"b-"+t,list:[]})}))),O),console.log("dev-mode: runBasicsTests() ENSURE CLEANUP WORKS 6"),x._rev="2-22080c42d471e3d2625e49dcca3b8e2b",x._meta.lwt=l();await h.bulkWrite([{previous:V,document:x}],O);console.log("dev-mode: runBasicsTests() ENSURE CLEANUP WORKS 7");for(var j=await p(h),C=!1;!C;)C=await h.cleanup(0);if(await p(h)>=j)throw new Error("dev-mode: runBasicsTests() docs not cleaned up");await h.close()}catch(e){throw console.log("dev-mode: runBasicsTests() failed:"),console.dir(e),await c(1e7),e}console.log("dev-mode: runBasicsTests() DONE")}async function p(e){var t=-1;return await e.taskQueue.runRead((async a=>{var s=await e.internals.statePromise,o=await r(s.documentFileHandle,a);t=await o.getSize()})),t}export function getWriteData(e={}){return Object.assign({key:g(10),stringValue:"barfoo",numberValue:m(1,100),nes:{ted:g(10)},list:[{stringValue:g(5),numberValue:m(1,100)},{stringValue:g(5),numberValue:m(1,100)}],_deleted:!1,_attachments:{},_meta:{lwt:l()},_rev:"1-12080c42d471e3d2625e49dcca3b8e1a"},e)}