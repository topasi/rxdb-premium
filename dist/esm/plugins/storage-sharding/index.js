import{ensureRxStorageInstanceParamsAreCorrect as e}from"rxdb/plugins/core";import{checkVersion as a}from"../../plugins/shared/version-check.js";import{RxStorageInstanceSharding as r}from"./rx-storage-instance-sharding.js";export*from"./rx-storage-instance-sharding.js";export*from"./sharding-helper.js";export*from"./sharding-types.js";import{RXDB_PREMIUM_VERSION as s}from"../shared/rxdb-premium-version.js";export function getRxStorageSharding(n){var o={name:"sharding",rxdbVersion:s,async createStorageInstance(s){e(s),a();var t=s.schema.sharding?s.schema.sharding.shards:2,i=s.schema.sharding?s.schema.sharding.mode:"collection",c={shardInstances:await Promise.all(new Array(t).fill(0).map(((e,a)=>{var r="-"+a+"-of-"+t,o=s.databaseName+("database"===i?r:""),c=s.collectionName+("collection"===i?r:"");return n.storage.createStorageInstance({databaseInstanceToken:s.databaseInstanceToken,databaseName:o,collectionName:c,multiInstance:s.multiInstance,options:s.options?s.options.parentOptions:{},schema:s.schema,devMode:s.devMode})})))};return new r(o,s.databaseName,s.collectionName,s.schema,c,s.options)}};return o}