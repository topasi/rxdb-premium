import{isMaybeReadonlyArray as e,getIndexableStringMonad as r,getFromMapOrThrow as n}from"rxdb/plugins/core";export function getIndexName(e){return e.join("||")}export function getIndexId(e,r){var t=getIndexName(r);return n(e.indexIdByName,t)}export function normalizeIndexedDBIndex(r,n){return e(n)?n.slice(0):[n]}export function getIndexedDBIndexesFromSchema(e){var r=e.indexes?e.indexes.slice(0):[];return e.properties._meta&&e.properties._meta.properties&&e.properties._meta.properties.lwt&&r.push(["_meta.lwt"]),r=r.map((r=>normalizeIndexedDBIndex(e,r)))}export var INDEXEDDB_DEFAULT_INDEX_SETITNGS={locale:null,unique:!1};export function createIndexesOnStore(e,r){r.indexIds.forEach((r=>{e.createIndex(r,r,INDEXEDDB_DEFAULT_INDEX_SETITNGS)}))}export function toIndexRow(e,r,n,t){for(var i={i:n,d:t,i0:void 0,i1:void 0,i2:void 0,i3:void 0,i4:void 0,i5:void 0,i6:void 0,i7:void 0},d=0;d<e;++d){var o=(0,r[d])(t);i["i"+d]=o}return i}export var CLEANUP_INDEX=["_deleted","_meta.lwt"];export var INDEX_NAME_CLEANUP=getIndexName(CLEANUP_INDEX);export function getIndexableStringByIndexName(e){var n={},t=e.indexes?e.indexes.map((e=>Array.isArray(e)?e.slice(0):[e])):[];t.push(CLEANUP_INDEX);var i=new Map;return t.forEach(((t,d)=>{var o="i"+d,a=getIndexName(t);if(i.has(a))throw new Error("duplicate index "+a);i.set(a,o),n[o]=r(e,t)})),{indexIdByName:i,monadByIndexId:n}}