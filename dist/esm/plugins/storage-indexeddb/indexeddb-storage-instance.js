import{addRxStorageMultiInstanceSupport as t,getPrimaryFieldOfPrimaryKey as e,getStartIndexStringFromLowerBound as n,getStartIndexStringFromUpperBound as s,now as a,PROMISE_RESOLVE_VOID as i}from"rxdb/plugins/core";import{Subject as r}from"rxjs";import{attachmentObjectId as o,closeIndexedDBDatabase as c,ensureNotClosed as h,getIndexedDBState as m,runReadTask as d,getStoreNamesForStorageInstance as u,RX_STORAGE_NAME_INDEXEDDB as l}from"./indexeddb-helpers.js";import{CLEANUP_INDEX as w,getIndexableStringByIndexName as y,getIndexId as f}from"./indexeddb-index-helpers.js";import{countIndexedDB as b,queryIndexedDB as g}from"./indexeddb-query.js";import{indexedDBFindByIds as p}from"./indexeddb-find-by-ids.js";import{bulkWrite as v}from"./indexeddb-bulk-write.js";var x=a();export var RxStorageInstanceIndexedDB=function(){function t(t,n,s,a,i,o,c){this.changes$=new r,this.instanceId=x++,this.storage=t,this.databaseName=n,this.collectionName=s,this.schema=a,this.internals=i,this.options=o,this.settings=c,this.primaryPath=e(this.schema.primaryKey)}var m=t.prototype;return m.updateMinKnownDocs=function(t){this.internals.minKnownDocsAmount<t&&(this.internals.minKnownDocsAmount=t)},m.bulkWrite=async function(t,e){var n=await v(this,t,e);return this.updateMinKnownDocs(t.length-n.error.length),n},m.findDocumentsById=async function(t,e){h(this);var n=await d(this,(async n=>{var s=n.objectStore(this.internals.storeNames.documentStore);return p(s,t,e)}));return this.updateMinKnownDocs(n.length),n},m.query=async function(t){await this.internals.state.creationPromise,h(this);var e=await g(this,t);return this.updateMinKnownDocs(e.documents.length),e},m.count=async function(t){if(t.queryPlan.selectorSatisfiedByIndex){var e=await b(this,t);return this.updateMinKnownDocs(e.count),e}var n=await g(this,t);return this.updateMinKnownDocs(n.documents.length),{count:n.documents.length,mode:"slow"}},m.changeStream=function(){return this.changes$.asObservable()},m.cleanup=async function(t){var e=this.internals.state;await e.creationPromise;var i=this.settings.IDBKeyRange;return h(this),d(this,(async e=>{var r=e.objectStore(this.internals.storeNames.documentStore),o=this.settings.batchSize,c=a()-t,h=f(this.internals,w),m=r.index(h),d=n(this.schema,w,[!0,1]),u=s(this.schema,w,[!0,c]),l=i.bound(d,u,!0,!0),y=await new Promise(((t,e)=>{var n=m.getAll(l,o);n.onerror=e,n.onsuccess=function(e){t(e.target.result)}}));return await Promise.all(y.map((t=>new Promise(((e,n)=>{var s=t.i,a=r.delete(s);a.onerror=n,a.onsuccess=()=>e()}))))),y.length<o}))},m.remove=async function(){var t=this.internals.state;return await t.creationPromise,h(this),d(this,(async t=>{var e=[t.objectStore(this.internals.storeNames.documentStore),t.objectStore(this.internals.storeNames.writeAheadStore)];return this.schema.attachments&&e.push(t.objectStore(this.internals.storeNames.attachmentsStore)),await Promise.all(e.map((t=>new Promise(((e,n)=>{var s=t.clear();s.onerror=n,s.onsuccess=e}))))),this.close()}))},m.getAttachmentData=async function(t,e){var n=this.internals.state;return await n.creationPromise,h(this),d(this,(n=>{var s=n.objectStore(this.internals.storeNames.attachmentsStore),a=o(t,e);return new Promise(((n,i)=>{var r=s.get(a);r.onsuccess=()=>{var s=r.result;s?n(s.data):i("attachment missing documentId: "+t+" attachmentId: "+e)}}))}))},m.close=async function(){return this.closed||(this.closed=(async()=>(await this.internals.state.creationPromise,await d(this,(async t=>{})),this.changes$.complete(),c(this.internals.state)))()),this.closed},m.conflictResultionTasks=function(){return(new r).asObservable()},m.resolveConflictResultionTask=function(t){return i},t}();export async function createIndexedDBStorageInstance(e,n,s){var a=y(n.schema),i=Array.from(a.indexIdByName.values()),r=await m(e,s,n,[{collectionName:n.collectionName,schema:n.schema,indexIds:i}]);await r.creationPromise;var o={state:r,storeNames:u(n.collectionName,n.schema),getIndexableStringByIndexId:a.monadByIndexId,getIndexableStringByIndexNumber:Object.values(a.monadByIndexId),indexIdByName:a.indexIdByName,indexNames:Object.keys(a),indexIds:i,minKnownDocsAmount:0},c=new RxStorageInstanceIndexedDB(e,n.databaseName,n.collectionName,n.schema,o,n.options,s);return await t(l,n,c),c}