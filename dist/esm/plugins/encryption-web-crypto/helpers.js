import{arrayBufferToString as t,b64DecodeUnicode as e,b64EncodeUnicode as r,randomCouchString as n,stringToArrayBuffer as o}from"rxdb/plugins/utils";export var GENERATE_KEY_KEY_USAGES=["encrypt","decrypt"];export var KEY_FORMAT="jwk";export var TEXT_ENCODER=new TextEncoder;export var TEXT_DECODER=new TextDecoder;export var MINIMUM_PASSWORD_LENGTH=8;export function getPasswordKey(t){return crypto.subtle.importKey("raw",TEXT_ENCODER.encode(t),"PBKDF2",!1,["deriveKey"])}export function getDefaultSeed(){return b642ab("Cydnw5jCrQoBL8K1GsK5GMKDBynCgA==")}export async function getCryptoKey(t,e,r){var n=await getPasswordKey(t);return await crypto.subtle.deriveKey({name:"PBKDF2",salt:r,iterations:784,hash:"SHA-256"},n,getSettingsForAlgoritm(e,!0),!1,GENERATE_KEY_KEY_USAGES)}export function getSettingsForAlgoritm(t,e){var r={name:t,hash:{name:"SHA-256"},length:256,modulusLength:204};return"AES-GCM"===t&&(r.tagLength=128),"AES-CTR"===t&&(r.counter=new Uint8Array(16),r.length=128),e&&("AES-CBC"===t&&(r.iv=crypto.getRandomValues(new Uint8Array(16))),"AES-GCM"===t&&(r.tagLength=128,r.iv=crypto.getRandomValues(new Uint8Array(12)))),r}export function createPassword(t){return Promise.resolve({algorithm:t,password:n(15)})}export function ab2b64(e){var n=t(e);return r(n)}export function b642ab(t){var r=e(t);return o(r)}export async function encryptString(t,e,r){var n=getSettingsForAlgoritm(e,!0);return ab2b64(await crypto.subtle.encrypt(n,t,TEXT_ENCODER.encode(r)))+"."+(n.iv?ab2b64(n.iv):"")}export async function decryptString(t,e,r){var[n,o]=r.split("."),a=b642ab(o),i=b642ab(n),E=getSettingsForAlgoritm(e,!0);E.iv=a;var p=await crypto.subtle.decrypt(E,t,i);return TEXT_DECODER.decode(p)}