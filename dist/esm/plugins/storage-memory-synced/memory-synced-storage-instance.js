import{getPrimaryFieldOfPrimaryKey as t,PROMISE_RESOLVE_VOID as n,cancelRxStorageReplication as e,META_INSTANCE_SCHEMA_TITLE as i,getChangedDocumentsSince as a}from"rxdb/plugins/core";import{filter as s,firstValueFrom as r}from"rxjs";export var MemorySyncedRxStorageInstance=function(){function o(n,e,a,s,r,o){if(this.closed=!1,this.pendingWrites=new Map,this.storage=n,this.databaseName=e,this.collectionName=a,this.schema=s,this.internals=r,this.options=o,this.primaryPath=t(this.schema.primaryKey),s.title===i)throw new Error("The memory-synced storage has no replication support, see https://rxdb.info/rx-storage-memory-synced.html")}var c=o.prototype;return c.bulkWrite=async function(t,n){await this.internals.initDonePromise;var e=await this.internals.forkInstance.bulkWrite(t,n);if(this.storage.settings.awaitWritePersistence){var i=await this.internals.replicationStatePromise;await i.streamQueue.up,await r(i.events.active.up.pipe(s((t=>!t))))}return e},c.findDocumentsById=async function(t,n){return await this.internals.initDonePromise,this.internals.forkInstance.findDocumentsById(t,n)},c.query=async function(t){return await this.internals.initDonePromise,this.internals.forkInstance.query(t)},c.count=async function(t){return await this.internals.initDonePromise,this.internals.forkInstance.count(t)},c.getAttachmentData=async function(t,n,e){return await this.internals.initDonePromise,this.internals.forkInstance.getAttachmentData(t,n,e)},c.getChangedDocumentsSince=async function(t,n){return await this.internals.initDonePromise,a(this.internals.forkInstance,t,n)},c.changeStream=function(){var t=!1;return this.internals.initDonePromise.then((()=>t=!0)),this.internals.forkInstance.changeStream().pipe(s((()=>!!t)))},c.cleanup=function(t){return this.internals.initDonePromise.then((()=>awaitReplicationInSync(this))).then((()=>Promise.all([this.internals.forkInstance.cleanup(t),this.internals.masterInstance.cleanup(t),this.internals.metaInstance.cleanup(t)]))).then((([t,n,e])=>t&&n&&e))},c.close=async function(){await this.internals.initDonePromise,await awaitReplicationInSync(this);var t=await this.internals.replicationStatePromise;await e(t),await Promise.all([this.internals.forkInstance.close(),this.internals.masterInstance.close(),this.internals.metaInstance.close()])},c.remove=async function(){await this.internals.initDonePromise,await awaitReplicationInSync(this);var t=await this.internals.replicationStatePromise;await e(t),await Promise.all([this.internals.forkInstance.remove(),this.internals.masterInstance.remove(),this.internals.metaInstance.remove()])},c.conflictResultionTasks=function(){return this.internals.conflictTasks$.asObservable()},c.resolveConflictResultionTask=function(t){return this.internals.resolvedConflictTasks$.next(t),n},o}();export async function awaitReplicationInSync(t){return await Promise.all(Array.from(t.internals.openConflictResolutions.values())),t.internals.initDonePromise.then((()=>t.internals.replicationStatePromise)).then((async t=>{await t.streamQueue.down,await t.streamQueue.up}))}