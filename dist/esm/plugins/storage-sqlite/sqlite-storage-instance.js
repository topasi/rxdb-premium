import t from"@babel/runtime/helpers/readOnlyError";import{getPrimaryFieldOfPrimaryKey as a,categorizeBulkWriteRows as e,isMaybeReadonlyArray as s,ensureNotFalsy as n,addRxStorageMultiInstanceSupport as i,PROMISE_RESOLVE_VOID as r,getFromMapOrThrow as o,promiseWait as h,getQueryMatcher as m,batchArray as c,now as d}from"rxdb/plugins/core";import{Subject as l}from"rxjs";import{attachmentRowKey as u,closeDatabaseConnection as p,ensureParamsCountIsCorrect as y,getDatabaseConnection as N,getIndexId as E,getJsonExtract as T,getSQLiteFindByIdSQL as b,getSQLiteUpdateSQL as I,RX_STORAGE_NAME_SQLITE as v,sqliteTransaction as w,SQLITE_VARIABLES_LIMIT as f,prepareSQLiteQuery as g,getDataFromResultRow as O}from"./sqlite-helpers.js";var S=0;export var RxStorageInstanceSQLite=function(){function t(t,e,s,n,i,r,o,h,m){this.changes$=new l,this.instanceId=S++,this.storage=t,this.databaseName=e,this.collectionName=s,this.schema=n,this.internals=i,this.options=r,this.settings=o,this.tableName=h,this.devMode=m,this.sqliteBasics=t.settings.sqliteBasics,this.primaryPath=a(this.schema.primaryKey)}var s=t.prototype;return s.run=function(t,a){return this.devMode&&y(a),this.sqliteBasics.run(t,a)},s.all=function(t,a){return this.devMode&&y(a),this.sqliteBasics.all(t,a)},s.bulkWrite=async function(t,a){var s=await this.internals.databasePromise,i={error:[]},r=[],h=[],m=5,l="("+new Array(m).fill("?").join(", ")+")",p=c(t,f/m);return await w(s,this.sqliteBasics,(async()=>{if(this.closed)throw new Error("SQLite.bulkWrite() already closed "+this.tableName+" context: "+a);return await Promise.all(p.map((async n=>{var m=n.map((t=>t.document[this.primaryPath])),c=await this.all(s,{query:'\n                                    SELECT data FROM "'+this.tableName+'" WHERE id IN ('+m.map((()=>"?")).join(", ")+")\n                                ",params:m,context:{method:"bulkWrite",data:t}}),d=new Map;c.forEach((t=>{var a=JSON.parse(O(t)),e=a[this.primaryPath];d.set(e,a)}));var p=e(this,this.primaryPath,d,n,a);h.push(p),i.error=p.errors;var y=new Map;if(p.bulkInsertDocs.length>0){var N='INSERT INTO "'+this.tableName+'" (\n                                id,\n                                revision,\n                                deleted,\n                                lastWriteTime,\n                                data\n                            ) VALUES '+new Array(p.bulkInsertDocs.length).fill(l).join(", ")+"; ",E=[];p.bulkInsertDocs.forEach((t=>{var a=t.document,e=a[this.primaryPath];y.set(e,a),E.push(e),E.push(a._rev),E.push(a._deleted?1:0),E.push(a._meta.lwt),E.push(JSON.stringify(a))})),r.push(this.all(s,{query:N,params:E,context:{method:"bulkWrite",data:p}}))}p.bulkUpdateDocs.length>0&&p.bulkUpdateDocs.forEach((t=>{var a=t.document[this.primaryPath];y.set(a,t.document),r.push(this.run(s,I(this.tableName,this.primaryPath,t)))})),p.attachmentsAdd.forEach((t=>{var a=this.all(s,{query:'\n                                        INSERT INTO "'+this.tableName+'_attachments" (\n                                                docIdWithAttachmentId,\n                                                digest,\n                                                length,\n                                                type,\n                                                data\n                                            )\n                                        VALUES(?, ?, ?, ?, ?); \n                                    ',params:[u(t.documentId,t.attachmentId),o(y,t.documentId)._attachments[t.attachmentId].digest,t.attachmentData.length,t.attachmentData.type,this.storage.base64AttachmentToStoredAttachmentsData(t.attachmentData.data)],context:{method:"bulkWrite attachmentsAdd",data:t.attachmentId}});r.push(a)})),p.attachmentsRemove.forEach((t=>{var a=this.all(s,{query:'\n                                    DELETE FROM\n                                        "'+this.tableName+'_attachments"\n                                    WHERE\n                                        docIdWithAttachmentId = ?\n                                    ',params:[u(t.documentId,t.attachmentId)],context:{method:"bulkWrite attachmentsRemove",data:t.attachmentId}});r.push(a)})),p.attachmentsUpdate.forEach((t=>{var a=this.all(s,{query:'\n                                    UPDATE "'+this.tableName+'_attachments"\n                                    SET\n                                        digest = ?,\n                                        length = ?,\n                                        type = ?,\n                                        data = ?\n                                    WHERE\n                                        docIdWithAttachmentId = ?\n                                    ',params:[o(y,t.documentId)._attachments[t.attachmentId].digest,t.attachmentData.length,t.attachmentData.type,this.storage.base64AttachmentToStoredAttachmentsData(t.attachmentData.data),u(t.documentId,t.attachmentId)],context:{method:"bulkWrite attachmentsUpdate",data:t.attachmentId}});r.push(a)}))}))),await Promise.all(r),this.closed?"ROLLBACK":"COMMIT"}),{databaseName:this.databaseName,collectionName:this.collectionName}),h.forEach((t=>{if(t.eventBulk.events.length>0){var a=n(t.newestRow).document;t.eventBulk.checkpoint={id:a[this.primaryPath],lwt:a._meta.lwt},t.eventBulk.endTime=d(),this.changes$.next(t.eventBulk)}})),i},s.modifyQuery=function(t,a){return this.storage.settings.queryModifier?this.storage.settings.queryModifier(a,t):a},s.query=async function(t){var a=g(this,t.query),e=await this.internals.databasePromise;if(await this.internals.indexCreationPromise,a.nonImplementedOperator){for(var s=a.mangoQuery,n=s.skip?s.skip:0,i=n+(s.limit?s.limit:1/0),r=[],o=m(this.schema,s),h=0,c=!1;!1===c;){var d=await this.all(e,this.modifyQuery(a,{query:'SELECT data FROM "'+this.tableName+'" '+a.sqlQuery.query+" OFFSET "+h,params:a.sqlQuery.params,context:{method:"query - bulk iteration",data:a}}));h+=d.length,d.forEach((t=>{var a=JSON.parse(O(t));o(a)&&r.push(a)})),(0===d.length||r.length>=i)&&(c=!0)}return{documents:r=r.slice(n,i)}}return{documents:(await this.all(e,this.modifyQuery(a,{query:'SELECT data FROM "'+this.tableName+'" '+a.sqlQuery.query,params:a.sqlQuery.params,context:{method:"query - normal",data:a}}))).map((t=>JSON.parse(O(t))))}},s.count=async function(t){var a=g(this,t.query);if(a.nonImplementedOperator)return{count:(await this.query(t)).documents.length,mode:"slow"};var e=await this.internals.databasePromise;await this.internals.indexCreationPromise;var s=(await this.all(e,this.modifyQuery(a,{query:'SELECT COUNT(1) as count FROM "'+this.tableName+'" '+a.queryWithoutSort,params:a.sqlQuery.params,context:{method:"count",data:a}})))[0];Array.isArray(s);var n=Array.isArray(s)?s[0]:s.count;return{count:n,mode:"fast"}},s.findDocumentsById=async function(t,a){var e=await this.internals.databasePromise;if(this.closed)throw new Error("SQLite.findDocumentsById() already closed "+this.tableName+" context: "+context);for(var s=await this.all(e,b(this.tableName,t,a)),n=[],i=0;i<s.length;++i){var r=s[i];n.push(JSON.parse(O(r)))}return n},s.changeStream=function(){return this.changes$.asObservable()},s.cleanup=async function(t){var a=await this.internals.databasePromise;await this.internals.indexCreationPromise;var e=(new Date).getTime()-t;return await this.all(a,{query:'\n                    DELETE FROM\n                        "'+this.tableName+'"\n                    WHERE\n                        deleted = 1\n                        AND\n                        lastWriteTime < ?\n                ',params:[e],context:{method:"cleanup",data:t}}),await this.run(a,{query:"pragma optimize;",params:[],context:{method:"cleanup optimize",data:t}}),!0},s.getAttachmentData=async function(t,a){var e=await this.internals.databasePromise,s='\n        SELECT data\n        FROM "'+this.tableName+'_attachments"\n        WHERE\n            docIdWithAttachmentId = ?\n        LIMIT 1\n        ;',n=(await this.all(e,{query:s,params:[u(t,a)],context:{method:"getAttachmentData",data:a}}))[0];return Array.isArray(n)?this.storage.storedAttachmentsDataToBase64(n[0]):this.storage.storedAttachmentsDataToBase64(n.data)},s.remove=async function(){if(this.closed)throw new Error("closed already");var t=await this.internals.databasePromise;await this.internals.indexCreationPromise;var a=[this.run(t,{query:'DROP TABLE IF EXISTS "'+this.tableName+'"',params:[],context:{method:"remove",data:this.tableName}})];return this.schema.attachments&&a.push(this.run(t,{query:'DROP TABLE IF EXISTS "'+this.tableName+'_attachments"',params:[],context:{method:"remove attachments",data:this.tableName}})),await Promise.all(a),this.close()},s.close=async function(){return this.closed||(this.closed=(async()=>{var t=await this.internals.databasePromise;await this.internals.indexCreationPromise,await w(t,this.sqliteBasics,(async()=>"COMMIT")),this.changes$.complete(),await p(this.databaseName,this.storage.settings.sqliteBasics)})()),this.closed},s.conflictResultionTasks=function(){return(new l).asObservable()},s.resolveConflictResultionTask=function(t){return r},t}();export async function createSQLiteStorageInstance(t,e,n){var r=a(e.schema.primaryKey),o=n.sqliteBasics,m=e.collectionName+"-"+e.schema.version,c={};c.databasePromise=N(t.settings.sqliteBasics,e.databaseName).then((async t=>(await w(t,o,(async()=>{var a='\n                CREATE TABLE IF NOT EXISTS "'+m+'"(\n                    id TEXT NOT NULL PRIMARY KEY,\n                    revision TEXT,\n                    deleted BOOLEAN NOT NULL CHECK (deleted IN (0, 1)),\n                    lastWriteTime INTEGER NOT NULL,\n                    data json\n                ) WITHOUT ROWID;\n                ';if(await o.run(t,{query:a,params:[],context:{method:"createSQLiteStorageInstance create tables",data:e.databaseName}}),e.schema.attachments){var s='\n                    CREATE TABLE IF NOT EXISTS "'+m+'_attachments"(\n                        docIdWithAttachmentId TEXT NOT NULL PRIMARY KEY,\n                        digest TEXT NOT NULL,\n                        length INTEGER NOT NULL,\n                        type TEXT NOT NULL,\n                        data BLOB\n                    ) WITHOUT ROWID;\n                    ';await o.run(t,{query:s,params:[],context:{method:"createSQLiteStorageInstance create tables",data:e.databaseName}})}return"COMMIT"}),{indexCreation:!1,databaseName:e.databaseName,collectionName:e.collectionName}),t))),c.indexCreationPromise=c.databasePromise.then((async t=>(await h(0),await w(t,o,(async()=>{var a=e.schema.indexes?e.schema.indexes.map((t=>s(t)?t:[t])):[];a.push(["deleted","lastWriteTime"]);var n=[];for(var i of a){var h=s(i)?i:[i],c=E(e.databaseName,e.collectionName,e.schema,h),d=h.map((t=>T(r,t))),l='CREATE INDEX IF NOT EXISTS "'+c+'" ON "'+m+'"('+d.join(", ")+"); ";n.push(l)}return n.length>0&&await Promise.all(n.map((async a=>{await o.run(t,{query:a,params:[],context:{method:"createSQLiteStorageInstance create indexes table",data:e.databaseName}})}))),"COMMIT"}),{indexCreation:!0,databaseName:e.databaseName,collectionName:e.collectionName}),t)));var d=new RxStorageInstanceSQLite(t,e.databaseName,e.collectionName,e.schema,c,e.options,n,m,e.devMode);return await i(v,e,d),d}