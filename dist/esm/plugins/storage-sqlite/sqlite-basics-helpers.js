import{ensureNotFalsy as e,PROMISE_RESOLVE_VOID as a,getFromMapOrCreate as r,randomCouchString as n}from"rxdb/plugins/core";import{boolParamsToInt as o}from"./sqlite-helpers.js";var s=new WeakMap;export function getSQLiteBasicsNode(e){var a=s.get(e);return a||(a={open:a=>Promise.resolve(new e.Database(a)),async run(e,a){if(!Array.isArray(a.params))throw console.dir(a),new Error("no params array given for query: "+a.query);await execSqlSQLiteNode(e,a,"run")},all:async(e,a)=>await execSqlSQLiteNode(e,a,"all"),setPragma:async(e,a,r)=>execSqlSQLiteNode(e,{query:"PRAGMA "+a+" = "+r,params:[],context:{method:"setPragma",data:{key:a,value:r}}},"run"),close:e=>closeSQLiteDatabaseNode(e),journalMode:"WAL2"},s.set(e,a)),a}export function getSQLiteBasicsNodeNative(e){return{open:async a=>new e(a),all:async(e,a)=>{var r=e.prepare(a.query);return await r.all(...mapNodeNativeParams(a.params))},run:async(e,a)=>{var r=e.prepare(a.query);await r.run(...mapNodeNativeParams(a.params))},setPragma:async(e,a,r)=>{await e.exec("pragma "+a+" = "+r+";")},close:async e=>e.close(),journalMode:""}}export function mapNodeNativeParams(e){return e.map((e=>"boolean"==typeof e?e?1:0:e))}export function execSqlSQLiteNode(e,a,r){var n=!1,o=!1;return new Promise(((s,t)=>{n&&console.log("# execSqlSQLiteNode() "+a.query),e[r](a.query,a.params,((r,c)=>{if(o)throw new Error("callback called mutliple times "+a.query);o=!0,r?(n&&(console.log("---- ERROR RUNNING SQL:"),console.log(a.query),console.dir(a.params),console.dir(r),console.log("----")),t(r)):(n&&(console.log("execSql() result: "+e.eventNames()),console.log(a.query),console.dir(c),console.log("execSql() result:"),console.log(a.query),console.dir(a.params),console.log("execSql() result -------------------------")),s(c))}))}))}export function closeSQLiteDatabaseNode(e){return new Promise(((a,r)=>{var n=!1;e.close((e=>{if(n)throw new Error("close() callback called mutliple times");n=!0,e&&!e.message.includes("Database is closed")?r(e):a()}))}))}var t=new WeakMap,c=new Map,l=a;export function getSQLiteBasicsCapacitor(a,n){return r(t,a,(()=>({open:e=>l=l.then((async()=>{var n=await r(c,e,(()=>a.createConnection(e,!1,"no-encryption",1)));return await n.open(),n})),async run(e,a){await e.run(a.query,a.params,!1)},async all(a,r){var n=await a.query(r.query,r.params);return e(n.values)},setPragma:async(e,a,r)=>e.execute("PRAGMA "+a+" = "+r,!1),close:e=>l=l.then((()=>e.close())),journalMode:"android"===n.getPlatform()?"":"WAL"})))}export var EMPTY_FUNCTION=()=>{};export function getSQLiteBasicsQuickSQLite(e){return{open:async a=>e({name:a}),all:async(e,a)=>(await e.executeAsync(a.query,a.params)).rows._array,run:async(e,a)=>e.executeAsync(a.query,a.params),setPragma:async(e,a,r)=>e.executeAsync("PRAGMA "+a+" = "+r,[]),close:async e=>{e.close(EMPTY_FUNCTION,EMPTY_FUNCTION)},journalMode:""}}export function getSQLiteBasicsExpoSQLite(e){return{open:async a=>Promise.resolve(e(a)),all:async(e,a)=>new Promise(((r,n)=>{e.exec([{sql:a.query,args:a.params}],!1,((e,a)=>{if(e)return n(e);if(Array.isArray(a)){var o=a[0];return Object.prototype.hasOwnProperty.call(o,"rows")?r(o.rows):n(o.error)}return n(new Error("getSQLiteBasicsExpoSQLite.all() response is not an array: "+a))}))})),run:async(e,a)=>new Promise(((r,n)=>{e.exec([{sql:a.query,args:a.params}],!1,((e,a)=>e?n(e):Array.isArray(a)&&a[0]&&a[0].error?n(a):void r(a)))})),setPragma:(e,a,r)=>new Promise(((n,o)=>{e.exec([{sql:"pragma "+a+" = "+r+";",args:[]}],!1,((e,a)=>e?o(e):Array.isArray(a)&&a[0]&&a[0].error?o(a):void n(a)))})),close:async e=>e.closeAsync(),journalMode:""}}export function getSQLiteBasicsWebSQL(a){return{open:async r=>{var n=await a(r,"1.0","",1);return e(n._db)},all:async(e,a)=>{var r=await webSQLExecuteQuery(e,a);return Array.from(r.rows)},run:async(e,a)=>{await webSQLExecuteQuery(e,a)},setPragma:async(e,a,r)=>{await webSQLExecuteQuery(e,{query:"pragma "+a+" = "+r+";",params:[],context:{method:"setPragma",data:{key:a,value:r}}}).catch((e=>{if(!e.message.includes("23 not authorized"))throw e}))},close:async e=>"function"==typeof e.closeAsync?e.closeAsync():"function"==typeof e.close?e.close():void 0,journalMode:""}}export function webSQLExecuteQuery(e,a){return new Promise(((r,n)=>{e.exec([{sql:a.query,args:a.params}],!1,((e,a)=>e?n(e):Array.isArray(a)&&a[0]&&a[0].error?n(a[0].error):r(a[0])))}))}var i=a;export function getSQLiteBasicsWasm(e){var a=n(5);return console.log("getSQLiteBasicsWasm() debugId: "+a),{debugId:a,open:async a=>{var r=i.then((async()=>({nr:await e.open_v2(a),name:a})));return i=r.catch((()=>{})),r},all:async(a,r)=>{var n=i.then((async()=>(await e.execWithParams(a.nr,r.query,o(r.params))).rows));return i=n.catch((()=>{})),n},run:async(a,r)=>{var n=i.then((async()=>{await e.run(a.nr,r.query,r.params)}));return i=n.catch((()=>{})),n},setPragma:async(a,r,n)=>{var o=i.then((async()=>{await e.exec(a.nr,"pragma "+r+" = "+n+";")}));return i=o.catch((()=>{})),o},close:async a=>{var r=i.then((async()=>{await e.close(a.nr)}));return i=r.catch((()=>{})),r},journalMode:""}}