import{createRevision as e,flatCloneDocWithMeta as a,getSingleDocument as r,now as t,writeSingle as n}from"rxdb/plugins/core";import{getNextBlockId as i,getNonCleanedUpBlocks as o}from"./helper.js";export async function cleanupNonCleanedBlocks(s){return await s.internals.initDonePromise,s.writeQueue=s.writeQueue.then((async()=>{var l=s.internals.blockMap,u=s.primaryPath;if(0===l.cleanup.size)return!1;var c=Array.from(l.cleanup.entries());l.cleanup.clear();var p=await s.internals.persistentInstancePromise,d=await o(p);if(!d[0])return!1;for(var m=async function(){var n=c[v],i=n[1],o=await r(p,n[0]);if(!o)return 0;var l=!1,d=o.d.filter((e=>{var a=e[u];return!i.has(a)||(l=!0,!1)}));if(!l)return 0;var m=a(o);m.d=d,m._rev=e(s.databaseInstanceToken,m),m._meta.lwt=t(),await p.bulkWrite([{document:m,previous:o}],"memory-mapped-cleanup-blocks-single-block")},v=0;v<c.length;v++)await m();for(var w=[],f=new Set,b=[],h=0;h<d.length;h++){var k=d[h];b.push(k.id);for(var _=0;_<k.d.length;_++){var y=k.d[_],g=y[u];f.has(g)||(f.add(g),w.push(y))}}var I={id:await i(s),_deleted:!1,_attachments:{},_meta:{lwt:t()},s:b,_rev:e(s.databaseInstanceToken),c:!0,d:w};return await n(p,{document:I},"memory-mapped-cleanup-blocks"),await p.bulkWrite(d.map((r=>{var n=a(r);return n._rev=e(s.databaseInstanceToken,r),n._deleted=!0,n._meta.lwt=t(),n.c=!0,{previous:r,document:n}})),"memory-mapped-cleanup-blocks-old-ones"),!0})),s.writeQueue}